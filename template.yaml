AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  AWS

  Sample SAM Template for AWS


Parameters:
  LayerArn:
    Type: String
    Description: the lambda layer containing the common dependencies
    Default: 'arn:aws:lambda:us-east-1:726075243133:layer:algLayer:3'

Globals:
  Function:
    Runtime: python3.6
    Timeout: 300
    CodeUri: ./
    Tracing: Active
    Layers:
      - !Ref LayerArn
Resources:
  HelloAlgernon:
    Type: AWS::Serverless::Function
    Properties:
      Handler: toll_booth.tasks.app.lambda_handler
      Timeout: 10
      Events:
        HelloAlgernonApi:
          Type: Api
          Properties:
            Path: /hello
            Method: get
  StateTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: event_id
          AttributeType: S
        - AttributeName: event_timestamp
          AttributeType: N
        - AttributeName: flow_id
          AttributeType: S
        - AttributeName: flow_run_id
          AttributeType: S
      KeySchema:
        - AttributeName: event_id
          KeyType: HASH
        - AttributeName: event_timestamp
          KeyType: RANGE
      BillingMode: PAY_PER_REQUEST
      SSESpecification:
        SSEEnabled: true
      GlobalSecondaryIndexes:
        - IndexName: flow-index
          KeySchema:
            - AttributeName: flow_id
              KeyType: HASH
            - AttributeName: flow_run_id
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
  StateListener:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: state-listener
      KmsMasterKeyId: alias/aws/sns
      Subscription:
        - Endpoint: !GetAtt EventQueue.Arn
          Protocol: sqs
  EventQueue:
    Type: AWS::SQS::Queue
    Properties:
      VisibilityTimeout: 300
      RedrivePolicy:
        deadLetterTargetArn:
          !GetAtt DeadLetter.Arn
        maxReceiveCount: 15
      KmsMasterKeyId: !Ref MasterKey
  QueuePolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      PolicyDocument:
        Version: "2012-10-17"
        Id: "GentlemenSqsPolicy"
        Statement:
          -
            Effect: Allow
            Principal: "*"
            Action: "SQS:SendMessage"
            Resource: !GetAtt EventQueue.Arn
            Condition:
              ArnEquals:
                aws:SourceArn: !Ref StateListener
      Queues:
        - !Ref EventQueue
  MasterKey:
    Type: AWS::KMS::Key
    Properties:
      KeyPolicy:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - "sns.amazonaws.com"
                - "lambda.amazonaws.com"
            Action:
              - "kms:GenerateDataKey*"
              - "kms:Decrypt"
            Resource: "*"
          - Effect: Allow
            Principal:
              AWS: !Join
                 - ''
                 - - 'arn:aws:iam::'
                   - !Ref 'AWS::AccountId'
                   - ':root'
            Action:
              - "kms:*"
            Resource: "*"
  DeadLetter:
    Type: AWS::SQS::Queue
    Properties:
      KmsMasterKeyId: alias/aws/sqs
      MessageRetentionPeriod: 1209600
  WorkQueue:
    Type: AWS::Serverless::Function
    Properties:
      Handler: toll_booth.tasks.process_new_state_event.task
      Events:
        Queue:
          Type: SQS
          Properties:
            Queue: !GetAtt EventQueue.Arn
            BatchSize: 10
        InvokeApi:
          Type: Api
          Properties:
            Path: /work
            Method: get


Outputs:
  HelloApi:
    Description: "API Gateway endpoint URL for Prod stage for Hello Algernon function"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/hello/"
  WorkApi:
    Description: "API Gateway endpoint URL for Prod stage for work function"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/work/"
  HelloAlgernonFunction:
    Description: "Hello Algernon Lambda Function ARN"
    Value: !GetAtt HelloAlgernon.Arn
  StateListenerArn:
    Description: "the ARN of the sns endpoint to add state events"
    Value: !Ref StateListener
    Export:
      Name: !Sub "${AWS::StackName}-state-listener"
  HelloWorldFunctionIamRole:
    Description: "Implicit IAM Role created for Hello Algernon function"
    Value: !GetAtt HelloAlgernonRole.Arn
